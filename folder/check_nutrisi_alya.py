# -*- coding: utf-8 -*-
"""check nutrisi Alya.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QxHqivvJf3Dp5iOJEjiHDZr92dWXPLdu
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam
from sklearn.metrics.pairwise import cosine_similarity
from tensorflow.keras.models import load_model
import matplotlib.pyplot as plt


# Load datasets
akg_bayi_df = pd.read_csv('https://raw.githubusercontent.com/Nourish-Path/MachineLearning/refs/heads/main/Dataset/AKG-bayi.csv')
food_check_df = pd.read_csv('https://raw.githubusercontent.com/Nourish-Path/MachineLearning/refs/heads/main/Dataset/food-check.csv')

# Inputs
try:
    age = int(input("Masukkan usia anak (dalam bulan): ").strip())
    foods = input("Masukkan kategori makanan: ").strip()
    descriptions = input("Masukkan deskripsi makanan: ").strip()
except ValueError:
    raise ValueError("Input tidak valid, pastikan usia anak berupa angka.")

# Filter data based on input
akg_bayi_filtered = akg_bayi_df[akg_bayi_df['age'] == age]
food_check_filtered = food_check_df[
    (food_check_df['Category'] == foods) &
    (food_check_df['Description'] == descriptions)
]

if akg_bayi_filtered.empty or food_check_filtered.empty:
    raise ValueError("Data tidak ditemukan untuk input yang diberikan.")

# Align column names for common nutrition metrics
common_columns = [col for col in akg_bayi_filtered.columns if col in food_check_filtered.columns and col != 'age']

# Ensure there's at least one common column
if not common_columns:
    raise ValueError("Tidak ada kolom nutrisi yang sesuai antara data AKG dan makanan.")

akg_bayi_filtered = akg_bayi_filtered[common_columns]
food_check_filtered = food_check_filtered[common_columns]

# Calculate nutrient differences
required_nutrients = akg_bayi_filtered.iloc[0].round(2)  # Nutrient required by the baby
consumed_nutrients = food_check_filtered.iloc[0].round(2)  # Nutrient consumed by the food
nutrient_differences = (required_nutrients - consumed_nutrients).round(2)

# Normalize nutrient data (for all foods)
scaler = MinMaxScaler()
normalized_food_data = pd.DataFrame(scaler.fit_transform(food_check_df[common_columns]),
                                    columns=common_columns)

# Normalize user's nutrient differences
normalized_nutrient_diff = scaler.transform(nutrient_differences.values.reshape(1, -1))

# Prepare the data for training
X = normalized_food_data.values
y = np.array([nutrient_differences.values] * len(X))

# Split data into training and testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the Sequential model
model = Sequential([
    Dense(128, input_dim=X.shape[1], activation='relu'),
    Dense(64, activation='relu'),
    Dense(32, activation='relu'),
    Dense(y.shape[1], activation='linear')  # Output layer: nutrisi yang direkomendasikan
])

# Compile the model
model.compile(optimizer=Adam(), loss='mse', metrics=['mae'])

# Train the model
epochs = 100
history = model.fit(X_train, y_train, epochs=epochs, batch_size=32, validation_data=(X_test, y_test))

# Get predictions for food recommendations
predictions = model.predict(X_test)

# Calculate cosine similarity between the user's nutrient differences and the food dataset
similarities = cosine_similarity(normalized_nutrient_diff, normalized_food_data)

# Add similarity scores to the food dataset
food_check_df['Relevance'] = similarities.flatten()

# Recommend top N foods
top_n = 5
recommended_foods = food_check_df.sort_values(by='Relevance', ascending=False).head(top_n)

# Display results
print("\nNutrisi yang harus dipenuhi:")
print(required_nutrients)

print("\nNutrisi makanan yang telah dikonsumsi:")
print(consumed_nutrients)

print("\nSelisih nutrisi:")
print(nutrient_differences)

print("\nRekomendasi makanan berdasarkan Content-Based Filtering:")
print(recommended_foods[['Category', 'Description', 'Relevance']])

model.save("model.h5")

plt.plot(history.history['loss'], label='Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.plot(history.history['mae'], label='MAE')
plt.plot(history.history['val_mae'], label='Validation MAE')
plt.title('Training History')
plt.xlabel('Epochs')
plt.ylabel('Value')
plt.legend()
plt.show()